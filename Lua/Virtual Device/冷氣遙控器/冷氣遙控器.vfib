{"name":"冷氣遙控器","type":"virtual_device","properties":{"deviceIcon":0,"currentIcon":"0","log":"","logTemp":"","mainLoop":"if datas == nil then\n  datas = { elements = {} }\n  devices = datas.elements\n  \n  --[[參數設定 開始]]--\n  \n  -- 所有冷氣ID，程式會自動加入 控制全部冷氣但ID為0的冷氣\n  deviceIDs = \n  { \n    818 ,\n    819 ,\n    820 ,\n  }\n  \n  -- HC2 資訊\n  hc2IP = \"192.168.0.17\"\n  hc2Port = 80\n  hc2Account = \"Gamer\"\n  hc2Password = \"play\"\n  \n  -- 功能範圍，目前寫死不能動\n  modes = { \"暖氣\" , \"冷氣\" , \"除濕\" , \"送風\" }\n  tempDisplayModes = { true , true , false , false }\n  modeRange = #modes\n  defaultMode = 2\n  \n  -- 風量範圍，目前寫死不能動\n  winds = { \"微風\" , \"弱風\" , \"強風\" }\n  windRange = #winds\n  defaultWind = 2\n  \n  -- 溫度範圍\n  maxTemp = 25\n  minTemp = 21\n  tempRange = maxTemp - minTemp + 1\n  defaultTemp = math.floor( ( maxTemp + minTemp ) / 2 )\n  \n  -- global value\n  gDatas = \"AC_Ctrl_Datas\"\n  gCmds = \"AC_Ctrl_Cmds\"\n  \n  -- 更新頻率\n  cmdUpdateSec = 1  -- 指令輸入完多久後送出\n  infoCleanSec = 5  -- 資訊在畫面維持時間\n  \n  -- 命令，需與按鈕送出命令相同\n  exitCmd = \" EXIT\"\n  powCmd = \" POWER_\"\n  setCmd = \" SETTING_\"\n  \n  -- debug\n  debugWeights =\n  {\n    all = 10 ,\n    detail = 5 ,\n    baisc = 1 ,\n    none = 0 ,\n  }\n  debugWeight = debugWeights.detail \n  \n  --[[參數設定 結束]]--\n  \n  Trace = function( color , text , weight )\n    if debugWeight > weight then\n      fibaro:debug( '<span style=\"color:' .. color .. '\">' .. text .. '</span>' )\n    end\n  end\n  \n  local hasModeTextLength = #\"String to send\" -- 紅外線指令並須超過此字串長度\n    \n  -- 匯入並檢查device是否符合規範\n  local socket = Net.FHttp( hc2IP , hc2Port )\n  socket:setBasicAuthentication( hc2Account , hc2Password )\n  \n  local response , status , errorCode\n  response , status , errorCode = socket:POST( \"/api/globalVariables/\" , '{ \"name\" : \"' .. gDatas .. '\" , \"value\" : \"\"}' )\n  if tonumber( status ) >= 200 and tonumber( status ) < 300 and errorCode == 0 then\n    Trace( \"green\" , \"auto create global variable \\\"\" .. gDatas .. \"\\\"\" , 0 )\n  else\n    Trace( \"white\" , \"arleady create global variable \\\"\" .. gDatas .. \"\\\"\" , 0 )\n  end\n  response , status , errorCode = socket:POST( \"/api/globalVariables/\" , '{ \"name\" : \"' .. gCmds .. '\" , \"value\" : \"\"}' )\n  if tonumber( status ) >= 200 and tonumber( status ) < 300 and errorCode == 0 then\n    Trace( \"green\" , \"auto create global variable \\\"\" .. gCmds .. \"\\\"\" , 0 )\n  else\n    Trace( \"white\" , \"arleady create global variable \\\"\" .. gCmds .. \"\\\"\" , 0 )\n  end\n  \n  for i = 1 , #deviceIDs do   \n    response , status , errorCode = socket:GET( \"/api/virtualDevices/\" .. deviceIDs[ i ] )\n    if tonumber( status ) >= 200 and tonumber( status ) < 300 and errorCode == 0 then\n      local responseTable = json.decode( response )\n      local rows = responseTable.properties.rows\n      local match = true\n      if #rows ~= 1 + tempRange * 2 + 2 then\n        match = false\n      elseif #( rows[ 1 ].elements ) ~= 2 or rows[ 1 ].type ~= \"button\" then\n        match = false\n      else\n        for j = 2 , #rows do\n          if #( rows[ j ].elements ) ~= windRange or rows[ j ].type ~= \"button\" then\n            match = false\n            break\n          end\n        end\n      end\n      if match then  \n        local tempTable = \n        { \n          deviceID = deviceIDs[ i ] ,\n          name = responseTable.name , \n          modeEnable = \n          {\n            #( rows[ 2 ].elements[ 1 ].msg ) > hasModeTextLength ,\n            #( rows[ 2 + tempRange ].elements[ 1 ].msg ) > hasModeTextLength ,\n            #( rows[ 2 + tempRange * 2 ].elements[ 1 ].msg ) > hasModeTextLength ,\n            #( rows[ 3 + tempRange * 2 ].elements[ 1 ].msg ) > hasModeTextLength ,\n          },\n        }\n        table.insert( devices , tempTable )\n        Trace( \"green\" , \"virtual device #\" .. deviceIDs[ i ] .. \" responseTable.name\" .. \" import success\" , 0 )\n      else\n        Trace( \"red\" , \"virtual device #\" .. deviceIDs[ i ] .. \" responseTable.name\" .. \" is not correspond \" , 0 )\n      end\n    else\n      Trace( \"red\" , \"There is no virtual device #\" .. deviceIDs[ i ] , 0 )\n    end\n  end\n  \n  -- 控制全部的冷氣\n  local tempTable =\n  {\n    deviceID = 0 ,\n    name = \"全部\" , \n    modeEnable = \n    {\n      true ,\n      true ,\n      true ,\n      true ,\n    },\n  }\n  table.insert( devices , tempTable )\n  \n  -- 冷氣資料補全初始化\n  for i = 1 , #( devices ) do\n    devices[ i ].on = false\n    devices[ i ].mode = defaultMode\n    if devices[ i ].modeEnable[ defaultMode ] ~= true then\n      for j = 1 , modeRange do\n        if devices[ i ].modeEnable[ j ] then\n          devices[ i ].mode = j\n          break\n        end\n      end\n    end\n    devices[ i ].temp = defaultTemp\n    devices[ i ].wind = defaultWind\n  end\n  \n  -- 冷氣常數儲存\n  datas.modeNames = modes\n  datas.windNames = winds\n  datas.tempShowModes = tempDisplayModes\n  datas.tempMax = maxTemp\n  datas.tempMin = minTemp\n  \n  fibaro:setGlobal( gDatas , json.encode( datas ) )\n\n  --[[成員變數 開始]]--\n  \n  selfId = fibaro:getSelfId()\n  cmdTimeStamp = 0\t\t\t-- 命令多久更新一次，切換冷氣會馬上執行之前命令\n  infoTimeStamp = 0\t\t\t-- 遙控器顯示資訊要停留多久\n  lastCmds = \"\"\t\t\t\t-- 儲存命令字串\n  deviceCount = #devices\n  \n  --[[成員變數結束]]--\n  \n  -- 顯示設定\n  displayID = deviceCount\n  if deviceCount <= 2 then \n    displayID = 1\n  end\n  fibaro:call( selfId , \"setProperty\" , \"ui.ID.value\" , devices[ displayID ].name )\n  local state = \"\"\n  if devices[ displayID ].on then\n    local modeIdx = devices[ displayID ].mode\n    state = modes[ modeIdx ] .. \" \" \n    state = state .. winds[ devices[ displayID ].wind ] .. \" \" \n    if tempDisplayModes[ modeIdx ] then\n      state = state .. devices[ displayID ].temp .. \"℃\"\n    else\n      state = state .. \"　 　\"\n    end\n  end\n  fibaro:call( selfId , \"setProperty\" , \"ui.State.value\" , state )\n  fibaro:call( selfId , \"setProperty\" , \"ui.Info.value\" , \"\" )  \n  \n-- 顯示匯入裝置資訊\n  if debugWeight >= debugWeights.all then\n    for i = 1 , deviceCount do\n      fibaro:debug( devices[ i ].deviceID )\n      fibaro:debug( devices[ i ].name )\n      fibaro:debug( \"on : \" .. tostring( devices[ i ].on ) )\n      fibaro:debug( \"modeEnable : \" .. json.encode( devices[ i ].modeEnable ) )\n      fibaro:debug( modes[ devices[ i ].mode ] .. \" \" .. winds[ devices[ i ].wind ] .. \" \" .. devices[ i ].temp .. \"℃\" )\n    end\n  end\nend\n\nfunction DoPowerOff( idx )\n  fibaro:call( devices[ idx ].deviceID , \"pressButton\" , \"2\" )\nend\n\nfunction DoSetting( idx )\n  local buttonId = 2 + devices[ idx ].wind\n  local modeId = devices[ idx ].mode\n  if modeId == 1 then\n    buttonId = buttonId + ( maxTemp - devices[ idx ].temp ) * windRange\n  elseif modeId == 2 then\n    buttonId = buttonId + ( tempRange + maxTemp - devices[ idx ].temp ) * windRange\n  elseif modeId == 3 then\n    buttonId = buttonId + ( 2 * tempRange + maxTemp - devices[ idx ].temp ) * windRange\n  elseif modeId == 4 then\n    buttonId = buttonId + ( 2 * tempRange + 1 + maxTemp - devices[ idx ].temp ) * windRange\n  else\n    Trace( \"red\" , \"errow mode : \" .. modeId , 0 )\n  end\n  fibaro:call( devices[ idx ].deviceID , \"pressButton\" , tostring( buttonId ) )\nend\n\nfunction DoCmds( cmds )\n  if cmds == \"\" then \n    Trace( \"white\" , \"no cmds\" , 9 )\n    return \n  end\n  \n  -- 此時才需要更新狀態\n  local temp = fibaro:getGlobal( gDatas )\n  datas = json.decode( temp )\n  devices = datas.elements\n  \n  local idx , powCount = 0 , 0\n  for cmd in cmds:gmatch( powCmd .. \"(%d+)\" ) do\n    powCount = powCount + 1\n    idx = tonumber( cmd )\n  end\n  Trace( \"white\" , \"power count = \" .. powCount , 9 )\n  if powCount ~= 0 then\n    if idx ~= nil then\n      Trace( \"white\" , \"idx form power cmd = \" .. idx , 9 )\n    else\n      Trace( \"red\" , \"cann't find idx form power cmd\" , 0 )\n    end\n  else\n    idx = tonumber( cmds:match( setCmd .. \"(%d+)\" ) )\n    if idx ~= nil then\n      Trace( \"white\" , \"idx form setting cmd = \" .. idx , 9 )\n    else\n      if cmds:find( setCmd ) ~= nil then\n        Trace( \"red\" , \"cann't find idx form setting cmd\" , 0 )\n      else\n        Trace( \"yellow\" , \"only exit cmd : \" .. cmds , 4 )\n      end\n    end\n  end\n\n  if idx == nil or idx <= 0 then return end\n  -- 關機\n  if devices[ idx ].on == false then\n    Trace( \"yellow\" , \"#\" .. idx .. \" power off\" , 4 )\n    if idx == deviceCount then\n      for i = 1 , deviceCount - 1 do\n        DoPowerOff( i )\n      end\n    else\n      DoPowerOff( idx )\n    end\n  -- 設值\n  elseif idx ~= -1 or idx ~= nil then\n    Trace( \"yellow\" , \"#\" .. idx .. \" setting\" , 4 )\n    local info = \"\"\n    if idx == deviceCount then\n      for i = 1 , deviceCount - 1 do\n        if devices[ i ].on == false then\n          info = info .. devices[ i ].name .. \" is turn off, can't setting.　　　\\n\"\n          infoTimeStamp = os.time()\n        else\n          if cmds:match( setCmd ) ~= nil and devices[ i ].modeEnable[ devices[ deviceCount ].mode ] == false then\n            info = info .. devices[ i ].name .. \" no \" .. modes[ devices[ deviceCount ].mode ] .. \" mode, can't setting.　　　\\n\"\n            infoTimeStamp = os.time()\n          end\n          DoSetting( i )\n        end\n      end\n      fibaro:call( selfId , \"setProperty\" , \"ui.Info.value\" , info )\n    else\n      DoSetting( idx )\n    end\n  end\nend\n\nfunction UpdateCmds( cmds , isAll )\n  local begin , head , tail = 1 , 1 , 1\n  while head ~= nil do\n    head , tail = cmds:find( exitCmd , begin )\n    Trace( \"purple\" , \"begin: \" .. tostring( begin ) .. \" head: \" .. tostring( head ) .. \" tail: \" .. tostring( tail ) , 9 )\n    if head == nil then\n      if begin == 1 or isAll then\n        Trace( \"green\" , \"do last cmds : \" .. cmds:sub( begin ) , 9 )\n        DoCmds( cmds:sub( begin ) )\n      end\n    else\n      Trace( \"green\" , \"do cmds : \" .. cmds:sub( begin , head - 1 ) , 9 )\n      DoCmds( cmds:sub( begin , head - 1 ) )\n      begin = tail + 1\n    end\n  end\n  \n  local ret = cmds:sub( begin )\n  Trace( \"purple\" , \"is empty? \" .. tostring( ret == nil ) .. \" / \" .. tostring( begin == 1 ) .. \" : \" .. begin , 9 )\n  if ret == nil or begin == 1 then\n    ret = \"\"\n  end\n  Trace( \"purple\" , \"return : \" .. ret , 9 )\n  return ret\nend\n\n-- 主迴圈開始\nwhile true do\n\nlocal time = os.time()\n\nlocal cmds = fibaro:getGlobal( gCmds )\n\nif cmds ~= \"\" then\n  lastCmds = lastCmds .. cmds\n  fibaro:setGlobal( gCmds , \"\" )\n  cmdTimeStamp = time\nend\n\nif lastCmds ~= \"\" then\n  Trace( \"white\" , \"update : \" .. lastCmds .. \" / \" .. cmds , 4 )\n  if lastCmds:match( exitCmd ) ~= null then\n    lastCmds = UpdateCmds( lastCmds , false )\n    Trace( \"red\" , \"contain exit, do some commands, change to : \" .. lastCmds , 4 )\n  elseif time - cmdTimeStamp >= cmdUpdateSec then\n    lastCmds = UpdateCmds( lastCmds , true )\n    Trace( \"yellow\" , \"time's out, do all commands, change to : \" .. lastCmds , 4 )\n  else\n  end\nend\n\nif time - infoTimeStamp >= infoCleanSec then\n  fibaro:call( selfId , \"setProperty\" , \"ui.Info.value\" , \"\" )\n  infoTimeStamp = time\nend\n  \nfibaro:sleep( 500 )  \n  \nend","ui.ID.value":"全部","ui.Info.value":"","ui.State.value":"","visible":"true","rows":[{"type":"label","elements":[{"id":1,"lua":false,"waitForResponse":false,"caption":"裝置","name":"ID","favourite":false,"main":true}]},{"type":"button","elements":[{"id":2,"lua":true,"waitForResponse":false,"caption":"←","name":"Button11","empty":false,"msg":"local gDatas = \"AC_Ctrl_Datas\"\nlocal gCmds = \"AC_Ctrl_Cmds\"\n\nlocal selfID = fibaro:getSelfId()\nlocal acID = fibaro:getValue( selfID , \"ui.ID.value\" )\nlocal rawDatas = fibaro:getGlobal( gDatas )\nlocal datas = json.decode( rawDatas )\nlocal devices = datas.elements\nlocal deviceLength = #devices\nlocal findIdx = 0\nfor i = 1 , deviceLength do\n  if devices[ i ].name == acID then\n    findIdx = i\n    break\n  end\nend\n\nlocal changeIdx = findIdx - 1\n\nif deviceLength > 2 then\n  if changeIdx <= 0 then\n    changeIdx = deviceLength - 1\n  end\n  fibaro:call( selfID , \"setProperty\" , \"ui.ID.value\" , devices[ changeIdx ].name )\n  local state = \"\"\n  if devices[ changeIdx ].on then\n    local modeIdx = devices[ changeIdx ].mode\n    state = datas.modeNames[ modeIdx ] .. \" \" \n    state = state .. datas.windNames[ devices[ changeIdx ].wind ] .. \" \" \n    if datas.tempShowModes[ modeIdx ] then\n      state = state .. devices[ changeIdx ].temp .. \"℃\"\n    else\n      state = state .. \"　 　\"\n    end\n  end\n  fibaro:call( selfID , \"setProperty\" , \"ui.State.value\" , state )\n\n  local cmd = fibaro:getGlobal( gCmds ) .. \" EXIT\"\n  fibaro:setGlobal( gCmds , cmd )\nend","buttonIcon":0,"favourite":false,"main":false},{"id":3,"lua":true,"waitForResponse":false,"caption":"全選","name":"Button12","empty":false,"msg":"local gDatas = \"AC_Ctrl_Datas\"\nlocal gCmds = \"AC_Ctrl_Cmds\"\n\nlocal selfID = fibaro:getSelfId()\nlocal acID = fibaro:getValue( selfID , \"ui.ID.value\" )\nlocal rawDatas = fibaro:getGlobal( gDatas )\nlocal datas = json.decode( rawDatas )\nlocal devices = datas.elements\nlocal deviceLength = #devices\nlocal findIdx = 0\nfor i = 1 , deviceLength do\n  if devices[ i ].name == acID then\n    findIdx = i\n    break\n  end\nend\n\nlocal changeIdx = deviceLength\n\nif deviceLength > 2 and findIdx ~= changeIdx then\n  fibaro:call( selfID , \"setProperty\" , \"ui.ID.value\" , devices[ changeIdx ].name )\n  local state = \"\"\n  if devices[ changeIdx ].on then\n    local modeIdx = devices[ changeIdx ].mode\n    state = datas.modeNames[ modeIdx ] .. \" \" \n    state = state .. datas.windNames[ devices[ changeIdx ].wind ] .. \" \" \n    if datas.tempShowModes[ modeIdx ] then\n      state = state .. devices[ changeIdx ].temp .. \"℃\"\n    else\n      state = state .. \"　 　\"\n    end\n  end\n  fibaro:call( selfID , \"setProperty\" , \"ui.State.value\" , state )\n  \n  local cmd = fibaro:getGlobal( gCmds ) .. \" EXIT\"\n  fibaro:setGlobal( gCmds , cmd )\nend","buttonIcon":0,"favourite":false,"main":false},{"id":4,"lua":true,"waitForResponse":false,"caption":"→","name":"Button13","empty":false,"msg":"local gDatas = \"AC_Ctrl_Datas\"\nlocal gCmds = \"AC_Ctrl_Cmds\"\n\nlocal selfID = fibaro:getSelfId()\nlocal acID = fibaro:getValue( selfID , \"ui.ID.value\" )\nlocal rawDatas = fibaro:getGlobal( gDatas )\nlocal datas = json.decode( rawDatas )\nlocal devices = datas.elements\nlocal deviceLength = #devices\nlocal findIdx = 0\nfor i = 1 , deviceLength do\n  if devices[ i ].name == acID then\n    findIdx = i\n    break\n  end\nend\n\nlocal changeIdx = findIdx + 1\n\nif deviceLength > 2 then\n  if changeIdx >= deviceLength then\n    changeIdx = 1\n  end\n  fibaro:call( selfID , \"setProperty\" , \"ui.ID.value\" , devices[ changeIdx ].name )\n  local state = \"\"\n  if devices[ changeIdx ].on then\n    local modeIdx = devices[ changeIdx ].mode\n    state = datas.modeNames[ modeIdx ] .. \" \" \n    state = state .. datas.windNames[ devices[ changeIdx ].wind ] .. \" \" \n    if datas.tempShowModes[ modeIdx ] then\n      state = state .. devices[ changeIdx ].temp .. \"℃\"\n    else\n      state = state .. \"　 　\"\n    end\n  end\n  fibaro:call( selfID , \"setProperty\" , \"ui.State.value\" , state )\n  \n  local cmd = fibaro:getGlobal( gCmds ) .. \" EXIT\"\n  fibaro:setGlobal( gCmds , cmd )\nend","buttonIcon":0,"favourite":false,"main":false}]},{"type":"button","elements":[{"id":5,"lua":true,"waitForResponse":false,"caption":"On / Off","name":"Button21","empty":false,"msg":"local gDatas = \"AC_Ctrl_Datas\"\nlocal gCmds = \"AC_Ctrl_Cmds\"\n\nlocal selfID = fibaro:getSelfId()\nlocal acID = fibaro:getValue( selfID , \"ui.ID.value\" )\nlocal rawDatas = fibaro:getGlobal( gDatas )\nlocal datas = json.decode( rawDatas )\nlocal devices = datas.elements\nlocal deviceLength = #devices\nlocal findIdx = 0\nfor i = 1 , deviceLength do\n  if devices[ i ].name == acID then\n    findIdx = i\n    break\n  end\nend\n\nlocal on = true\nif devices[ findIdx ].on then\n  on = false \nend\ndevices[ findIdx ].on = on\n\nif findIdx == deviceLength then\n  for i = 1 , deviceLength - 1 do\n    devices[ i ].on = on\n  end\nelse\n  local allSame = true\n  for i = 1 , deviceLength - 1 do\n    if devices[ i ].on ~= on then\n      allSame = false\n      break\n    end\n  end\n  if allSame then\n    devices[ deviceLength ].on = on\n  end\nend\n\nlocal state = \"\"\nif devices[ findIdx ].on then\n  local modeIdx = devices[ findIdx ].mode\n  state = datas.modeNames[ modeIdx ] .. \" \"\n  state = state .. datas.windNames[ devices[ findIdx ].wind ] .. \" \" \n  if datas.tempShowModes[ modeIdx ] then\n    state = state .. devices[ findIdx ].temp .. \"℃\"\n  else\n    state = state .. \"　 　\"\n  end\nend\n\nfibaro:call( selfID , \"setProperty\" , \"ui.State.value\" , state )\n \nfibaro:setGlobal( gDatas , json.encode( datas ) )\nlocal cmd = fibaro:getGlobal( gCmds ) .. \" POWER_\" .. findIdx\nfibaro:setGlobal( gCmds , cmd )","buttonIcon":0,"favourite":false,"main":true}]},{"type":"label","elements":[{"id":6,"lua":false,"waitForResponse":false,"caption":"狀態","name":"State","favourite":false,"main":false}]},{"type":"button","elements":[{"id":7,"lua":true,"waitForResponse":false,"caption":"暖氣","name":"Button31","empty":false,"msg":"local gDatas = \"AC_Ctrl_Datas\"\nlocal gCmds = \"AC_Ctrl_Cmds\"\nlocal modeIdx = 1\n\nlocal selfID = fibaro:getSelfId()\nif fibaro:getValue( selfID , \"ui.State.value\" ) ~= \"\" then\n  local acID = fibaro:getValue( selfID , \"ui.ID.value\" )\n  local rawDatas = fibaro:getGlobal( gDatas )\n  local datas = json.decode( rawDatas )\n  local devices = datas.elements\n  local deviceLength = #devices\n  local findIdx = 0\n  for i = 1 , deviceLength do\n    if devices[ i ].name == acID then\n      findIdx = i\n      break\n    end\n  end\n  \n  if devices[ findIdx ].modeEnable[ modeIdx ] then\n    devices[ findIdx ].mode = modeIdx \n  else\n    local info = devices[ findIdx ].name .. \" no \" .. datas.modeNames[ devices[ findIdx ].mode ] .. \" mode, can't setting.　　　\\n\"\n    fibaro:call( selfID , \"setProperty\" , \"ui.Info.value\" , info )\n  end\n  \n  if findIdx == deviceLength then\n    local windIdx = devices[ deviceLength ].wind\n    local tempValue = devices[ deviceLength ].temp\n    for i = 1 , deviceLength - 1 do\n      if devices[ i ].on and devices[ i ].modeEnable[ modeIdx ] then\n        devices[ i ].mode = modeIdx \n        devices[ i ].wind = windIdx\n        devices[ i ].temp = tempValue\n      end\n    end\n  else\n    local allSame = true\n    for i = 1 , deviceLength - 1 do\n      if devices[ i ].mode ~= modeIdx and devices[ i ].modeEnable[ modeIdx ] and devices[ i ].on then\n        allSame = false\n        break\n      end\n    end\n    if allSame then\n      devices[ deviceLength ].mode = modeIdx\n    end\n  end\n  \n  local state = datas.modeNames[ devices[ findIdx ].mode ] .. \" \" \n  state = state .. datas.windNames[ devices[ findIdx ].wind ] .. \" \" \n  if datas.tempShowModes[ devices[ findIdx ].mode ] then\n    state = state .. devices[ findIdx ].temp .. \"℃\"\n  else\n    state = state .. \"　 　\"\n  end\n  \n  fibaro:call( selfID , \"setProperty\" , \"ui.State.value\" , state )\n   \n  fibaro:setGlobal( gDatas , json.encode( datas ) )\n  local cmd = fibaro:getGlobal( gCmds ) .. \" SETTING_\" .. findIdx\n  fibaro:setGlobal( gCmds , cmd )\nend","buttonIcon":0,"favourite":false,"main":false},{"id":8,"lua":true,"waitForResponse":false,"caption":"冷氣","name":"Button32","empty":false,"msg":"local gDatas = \"AC_Ctrl_Datas\"\nlocal gCmds = \"AC_Ctrl_Cmds\"\nlocal modeIdx = 2\n\nlocal selfID = fibaro:getSelfId()\nif fibaro:getValue( selfID , \"ui.State.value\" ) ~= \"\" then\n  local acID = fibaro:getValue( selfID , \"ui.ID.value\" )\n  local rawDatas = fibaro:getGlobal( gDatas )\n  local datas = json.decode( rawDatas )\n  local devices = datas.elements\n  local deviceLength = #devices\n  local findIdx = 0\n  for i = 1 , deviceLength do\n    if devices[ i ].name == acID then\n      findIdx = i\n      break\n    end\n  end\n\n  if devices[ findIdx ].modeEnable[ modeIdx ] then\n    devices[ findIdx ].mode = modeIdx \n  else\n    local info = devices[ findIdx ].name .. \" no \" .. datas.modeNames[ devices[ findIdx ].mode ] .. \" mode, can't setting.　　　\\n\"\n    fibaro:call( selfID , \"setProperty\" , \"ui.Info.value\" , info )\n  end\n  \n  if findIdx == deviceLength then\n    local windIdx = devices[ deviceLength ].wind\n    local tempValue = devices[ deviceLength ].temp\n    for i = 1 , deviceLength - 1 do\n      if devices[ i ].on and devices[ i ].modeEnable[ modeIdx ] then\n        devices[ i ].mode = modeIdx \n        devices[ i ].wind = windIdx\n        devices[ i ].temp = tempValue\n      end\n    end\n  else\n    local allSame = true\n    for i = 1 , deviceLength - 1 do\n      if devices[ i ].mode ~= modeIdx and devices[ i ].modeEnable[ modeIdx ] and devices[ i ].on then\n        allSame = false\n        break\n      end\n    end\n    if allSame then\n      devices[ deviceLength ].mode = modeIdx\n    end\n  end\n  \n  local state = datas.modeNames[ devices[ findIdx ].mode ] .. \" \" \n  state = state .. datas.windNames[ devices[ findIdx ].wind ] .. \" \" \n  if datas.tempShowModes[ devices[ findIdx ].mode ] then\n    state = state .. devices[ findIdx ].temp .. \"℃\"\n  else\n    state = state .. \"　 　\"\n  end\n  \n  fibaro:call( selfID , \"setProperty\" , \"ui.State.value\" , state )\n   \n  fibaro:setGlobal( gDatas , json.encode( datas ) )\n  local cmd = fibaro:getGlobal( gCmds ) .. \" SETTING_\" .. findIdx\n  fibaro:setGlobal( gCmds , cmd )\nend","buttonIcon":0,"favourite":false,"main":false},{"id":9,"lua":true,"waitForResponse":false,"caption":"除濕","name":"Button33","empty":false,"msg":"local gDatas = \"AC_Ctrl_Datas\"\nlocal gCmds = \"AC_Ctrl_Cmds\"\nlocal modeIdx = 3\n\nlocal selfID = fibaro:getSelfId()\nif fibaro:getValue( selfID , \"ui.State.value\" ) ~= \"\" then\n  local acID = fibaro:getValue( selfID , \"ui.ID.value\" )\n  local rawDatas = fibaro:getGlobal( gDatas )\n  local datas = json.decode( rawDatas )\n  local devices = datas.elements\n  local deviceLength = #devices\n  local findIdx = 0\n  for i = 1 , deviceLength do\n    if devices[ i ].name == acID then\n      findIdx = i\n      break\n    end\n  end\n  \n  if devices[ findIdx ].modeEnable[ modeIdx ] then\n    devices[ findIdx ].mode = modeIdx \n  else\n    local info = devices[ findIdx ].name .. \" no \" .. datas.modeNames[ devices[ findIdx ].mode ] .. \" mode, can't setting.　　　\\n\"\n    fibaro:call( selfID , \"setProperty\" , \"ui.Info.value\" , info )\n  end\n  \n  if findIdx == deviceLength then\n    local windIdx = devices[ deviceLength ].wind\n    local tempValue = devices[ deviceLength ].temp\n    for i = 1 , deviceLength - 1 do\n      if devices[ i ].on and devices[ i ].modeEnable[ modeIdx ] then\n        devices[ i ].mode = modeIdx \n        devices[ i ].wind = windIdx\n        devices[ i ].temp = tempValue\n      end\n    end\n  else\n    local allSame = true\n    for i = 1 , deviceLength - 1 do\n      if devices[ i ].mode ~= modeIdx and devices[ i ].modeEnable[ modeIdx ] and devices[ i ].on then\n        allSame = false\n        break\n      end\n    end\n    if allSame then\n      devices[ deviceLength ].mode = modeIdx\n    end\n  end\n  \n  local state = datas.modeNames[ devices[ findIdx ].mode ] .. \" \" \n  state = state .. datas.windNames[ devices[ findIdx ].wind ] .. \" \" \n  if datas.tempShowModes[ devices[ findIdx ].mode ] then\n    state = state .. devices[ findIdx ].temp .. \"℃\"\n  else\n    state = state .. \"　 　\"\n  end\n  \n  fibaro:call( selfID , \"setProperty\" , \"ui.State.value\" , state )\n   \n  fibaro:setGlobal( gDatas , json.encode( datas ) )\n  local cmd = fibaro:getGlobal( gCmds ) .. \" SETTING_\" .. findIdx\n  fibaro:setGlobal( gCmds , cmd )\nend","buttonIcon":0,"favourite":false,"main":false},{"id":10,"lua":true,"waitForResponse":false,"caption":"送風","name":"Button34","empty":false,"msg":"local gDatas = \"AC_Ctrl_Datas\"\nlocal gCmds = \"AC_Ctrl_Cmds\"\nlocal modeIdx = 4\n\nlocal selfID = fibaro:getSelfId()\nif fibaro:getValue( selfID , \"ui.State.value\" ) ~= \"\" then\n  local acID = fibaro:getValue( selfID , \"ui.ID.value\" )\n  local rawDatas = fibaro:getGlobal( gDatas )\n  local datas = json.decode( rawDatas )\n  local devices = datas.elements\n  local deviceLength = #devices\n  local findIdx = 0\n  for i = 1 , deviceLength do\n    if devices[ i ].name == acID then\n      findIdx = i\n      break\n    end\n  end\n  \n  if devices[ findIdx ].modeEnable[ modeIdx ] then\n    devices[ findIdx ].mode = modeIdx \n  else\n    local info = devices[ findIdx ].name .. \" no \" .. datas.modeNames[ devices[ findIdx ].mode ] .. \" mode, can't setting.　　　\\n\"\n    fibaro:call( selfID , \"setProperty\" , \"ui.Info.value\" , info )\n  end\n  \n  if findIdx == deviceLength then\n    local windIdx = devices[ deviceLength ].wind\n    local tempValue = devices[ deviceLength ].temp\n    for i = 1 , deviceLength - 1 do\n      if devices[ i ].on and devices[ i ].modeEnable[ modeIdx ] then\n        devices[ i ].mode = modeIdx \n        devices[ i ].wind = windIdx\n        devices[ i ].temp = tempValue\n      end\n    end\n  else\n    local allSame = true\n    for i = 1 , deviceLength - 1 do\n      if devices[ i ].mode ~= modeIdx and devices[ i ].modeEnable[ modeIdx ] and devices[ i ].on then\n        allSame = false\n        break\n      end\n    end\n    if allSame then\n      devices[ deviceLength ].mode = modeIdx\n    end\n  end\n  \n  local state = datas.modeNames[ devices[ findIdx ].mode ] .. \" \" \n  state = state .. datas.windNames[ devices[ findIdx ].wind ] .. \" \" \n  if datas.tempShowModes[ devices[ findIdx ].mode ] then\n    state = state .. devices[ findIdx ].temp .. \"℃\"\n  else\n    state = state .. \"　 　\"\n  end\n  \n  fibaro:call( selfID , \"setProperty\" , \"ui.State.value\" , state )\n   \n  fibaro:setGlobal( gDatas , json.encode( datas ) )\n  local cmd = fibaro:getGlobal( gCmds ) .. \" SETTING_\" .. findIdx\n  fibaro:setGlobal( gCmds , cmd )\nend","buttonIcon":0,"favourite":false,"main":false}]},{"type":"button","elements":[{"id":11,"lua":true,"waitForResponse":false,"caption":"微風","name":"Button41","empty":false,"msg":"local gDatas = \"AC_Ctrl_Datas\"\nlocal gCmds = \"AC_Ctrl_Cmds\"\nlocal windIdx = 1\n\nlocal selfID = fibaro:getSelfId()\nif fibaro:getValue( selfID , \"ui.State.value\" ) ~= \"\" then\n  local acID = fibaro:getValue( selfID , \"ui.ID.value\" )\n  local rawDatas = fibaro:getGlobal( gDatas )\n  local datas = json.decode( rawDatas )\n  local devices = datas.elements\n  local deviceLength = #devices\n  local findIdx = 0\n  for i = 1 , deviceLength do\n    if devices[ i ].name == acID then\n      findIdx = i\n      break\n    end\n  end\n  \n  devices[ findIdx ].wind = windIdx \n  \n  if findIdx == deviceLength then\n    local modeIdx = devices[ deviceLength ].mode\n    local tempValue = devices[ deviceLength ].temp\n    for i = 1 , deviceLength - 1 do\n      if devices[ i ].on and devices[ i ].modeEnable[ modeIdx ] then\n        devices[ i ].mode = modeIdx \n        devices[ i ].wind = windIdx\n        devices[ i ].temp = tempValue\n      end\n    end\n  else\n    local allSame = true\n    for i = 1 , deviceLength - 1 do\n      if devices[ i ].wind ~= windIdx and devices[ i ].on then\n        allSame = false\n        break\n      end\n    end\n    if allSame then\n      devices[ deviceLength ].wind = windIdx\n    end\n  end\n  \n  local modeIdx = devices[ findIdx ].mode\n  local state = datas.modeNames[ modeIdx ] .. \" \" \n  state = state .. datas.windNames[ windIdx ] .. \" \" \n  if datas.tempShowModes[ modeIdx ] then\n    state = state .. devices[ findIdx ].temp .. \"℃\"\n  else\n    state = state .. \"　 　\"\n  end\n  \n  fibaro:call( selfID , \"setProperty\" , \"ui.State.value\" , state )\n   \n  fibaro:setGlobal( gDatas , json.encode( datas ) )\n  local cmd = fibaro:getGlobal( gCmds ) .. \" SETTING_\" .. findIdx\n  fibaro:setGlobal( gCmds , cmd )\nend","buttonIcon":0,"favourite":false,"main":false},{"id":12,"lua":true,"waitForResponse":false,"caption":"弱風","name":"Button42","empty":false,"msg":"local gDatas = \"AC_Ctrl_Datas\"\nlocal gCmds = \"AC_Ctrl_Cmds\"\nlocal windIdx = 2\n\nlocal selfID = fibaro:getSelfId()\nif fibaro:getValue( selfID , \"ui.State.value\" ) ~= \"\" then\n  local acID = fibaro:getValue( selfID , \"ui.ID.value\" )\n  local rawDatas = fibaro:getGlobal( gDatas )\n  local datas = json.decode( rawDatas )\n  local devices = datas.elements\n  local deviceLength = #devices\n  local findIdx = 0\n  for i = 1 , deviceLength do\n    if devices[ i ].name == acID then\n      findIdx = i\n      break\n    end\n  end\n  \n  devices[ findIdx ].wind = windIdx \n  \n  if findIdx == deviceLength then\n    local modeIdx = devices[ deviceLength ].mode\n    local tempValue = devices[ deviceLength ].temp\n    for i = 1 , deviceLength - 1 do\n      if devices[ i ].on and devices[ i ].modeEnable[ modeIdx ] then\n        devices[ i ].mode = modeIdx \n        devices[ i ].wind = windIdx\n        devices[ i ].temp = tempValue\n      end\n    end\n  else\n    local allSame = true\n    for i = 1 , deviceLength - 1 do\n      if devices[ i ].wind ~= windIdx and devices[ i ].on then\n        allSame = false\n        break\n      end\n    end\n    if allSame then\n      devices[ deviceLength ].wind = windIdx\n    end\n  end\n  \n  local modeIdx = devices[ findIdx ].mode\n  local state = datas.modeNames[ modeIdx ] .. \" \" \n  state = state .. datas.windNames[ windIdx ] .. \" \" \n  if datas.tempShowModes[ modeIdx ] then\n    state = state .. devices[ findIdx ].temp .. \"℃\"\n  else\n    state = state .. \"　 　\"\n  end\n  \n  fibaro:call( selfID , \"setProperty\" , \"ui.State.value\" , state )\n   \n  fibaro:setGlobal( gDatas , json.encode( datas ) )\n  local cmd = fibaro:getGlobal( gCmds ) .. \" SETTING_\" .. findIdx\n  fibaro:setGlobal( gCmds , cmd )\nend","buttonIcon":0,"favourite":false,"main":false},{"id":13,"lua":true,"waitForResponse":false,"caption":"強風","name":"Button43","empty":false,"msg":"local gDatas = \"AC_Ctrl_Datas\"\nlocal gCmds = \"AC_Ctrl_Cmds\"\nlocal windIdx = 3\n\nlocal selfID = fibaro:getSelfId()\nif fibaro:getValue( selfID , \"ui.State.value\" ) ~= \"\" then\n  local acID = fibaro:getValue( selfID , \"ui.ID.value\" )\n  local rawDatas = fibaro:getGlobal( gDatas )\n  local datas = json.decode( rawDatas )\n  local devices = datas.elements\n  local deviceLength = #devices\n  local findIdx = 0\n  for i = 1 , deviceLength do\n    if devices[ i ].name == acID then\n      findIdx = i\n      break\n    end\n  end\n  \n  devices[ findIdx ].wind = windIdx \n  \n  if findIdx == deviceLength then\n    local modeIdx = devices[ deviceLength ].mode\n    local tempValue = devices[ deviceLength ].temp\n    for i = 1 , deviceLength - 1 do\n      if devices[ i ].on and devices[ i ].modeEnable[ modeIdx ] then\n        devices[ i ].mode = modeIdx \n        devices[ i ].wind = windIdx\n        devices[ i ].temp = tempValue\n      end\n    end\n  else\n    local allSame = true\n    for i = 1 , deviceLength - 1 do\n      if devices[ i ].wind ~= windIdx and devices[ i ].on then\n        allSame = false\n        break\n      end\n    end\n    if allSame then\n      devices[ deviceLength ].wind = windIdx\n    end\n  end\n  \n  local modeIdx = devices[ findIdx ].mode\n  local state = datas.modeNames[ modeIdx ] .. \" \" \n  state = state .. datas.windNames[ windIdx ] .. \" \" \n  if datas.tempShowModes[ modeIdx ] then\n    state = state .. devices[ findIdx ].temp .. \"℃\"\n  else\n    state = state .. \"　 　\"\n  end\n  \n  fibaro:call( selfID , \"setProperty\" , \"ui.State.value\" , state )\n   \n  fibaro:setGlobal( gDatas , json.encode( datas ) )\n  local cmd = fibaro:getGlobal( gCmds ) .. \" SETTING_\" .. findIdx\n  fibaro:setGlobal( gCmds , cmd )\nend","buttonIcon":0,"favourite":false,"main":false}]},{"type":"button","elements":[{"id":14,"lua":true,"waitForResponse":false,"caption":"▲","name":"Button51","empty":false,"msg":"local gDatas = \"AC_Ctrl_Datas\"\nlocal gCmds = \"AC_Ctrl_Cmds\"\n\nlocal selfID = fibaro:getSelfId()\nlocal state = fibaro:getValue( selfID , \"ui.State.value\" )\nlocal canModify = ( state:match( \"%d+\" ) ~= nil )\nif canModify then\n  local acID = fibaro:getValue( selfID , \"ui.ID.value\" )\n  local rawDatas = fibaro:getGlobal( gDatas )\n  local datas = json.decode( rawDatas )\n  local devices = datas.elements\n  local deviceLength = #devices\n  local findIdx = 0\n  for i = 1 , deviceLength do\n    if devices[ i ].name == acID then\n      findIdx = i\n      break\n    end\n  end\n  \n  local modeIdx = devices[ findIdx ].mode\n  local windIdx = devices[ findIdx ].wind\n  local tempValue = devices[ findIdx ].temp + 1\n  local maxTemp = datas.tempMax\n  if tempValue > maxTemp then\n    tempValue = maxTemp\n  end\n  devices[ findIdx ].temp = tempValue\n  \n  if findIdx == deviceLength then\n    for i = 1 , deviceLength - 1 do\n      if devices[ i ].on and devices[ i ].modeEnable[ modeIdx ] then\n        devices[ i ].mode = modeIdx \n        devices[ i ].wind = windIdx\n        devices[ i ].temp = tempValue\n      end\n    end\n  else\n    local allSame = true\n    for i = 1 , deviceLength - 1 do\n      if devices[ i ].temp ~= tempValue and devices[ i ].on then\n        allSame = false\n        break\n      end\n    end\n    if allSame then\n      devices[ deviceLength ].temp = tempValue\n    end\n  end\n  \n  state = datas.modeNames[ modeIdx ] .. \" \" \n  state = state .. datas.windNames[ windIdx ] .. \" \" \n  if datas.tempShowModes[ modeIdx ] then\n    state = state .. devices[ findIdx ].temp .. \"℃\"\n  else\n    state = state .. \"　 　\"\n  end\n  \n  fibaro:call( selfID , \"setProperty\" , \"ui.State.value\" , state )\n   \n  fibaro:setGlobal( gDatas , json.encode( datas ) )\n  local cmd = fibaro:getGlobal( gCmds ) .. \" SETTING_\" .. findIdx\n  fibaro:setGlobal( gCmds , cmd )\nend","buttonIcon":0,"favourite":false,"main":false},{"id":15,"lua":true,"waitForResponse":false,"caption":"▼","name":"Button52","empty":false,"msg":"local gDatas = \"AC_Ctrl_Datas\"\nlocal gCmds = \"AC_Ctrl_Cmds\"\n\nlocal selfID = fibaro:getSelfId()\nlocal state = fibaro:getValue( selfID , \"ui.State.value\" )\nlocal canModify = ( state:match( \"%d+\" ) ~= nil )\nif canModify then\n  local acID = fibaro:getValue( selfID , \"ui.ID.value\" )\n  local rawDatas = fibaro:getGlobal( gDatas )\n  local datas = json.decode( rawDatas )\n  local devices = datas.elements\n  local deviceLength = #devices\n  local findIdx = 0\n  for i = 1 , deviceLength do\n    if devices[ i ].name == acID then\n      findIdx = i\n      break\n    end\n  end\n  \n  local modeIdx = devices[ findIdx ].mode\n  local windIdx = devices[ findIdx ].wind\n  local tempValue = devices[ findIdx ].temp - 1\n  local minTemp = datas.tempMin\n  if tempValue < minTemp then\n    tempValue = minTemp\n  end\n  devices[ findIdx ].temp = tempValue\n\n  if findIdx == deviceLength then\n    for i = 1 , deviceLength - 1 do\n      if devices[ i ].on and devices[ i ].modeEnable[ modeIdx ] then\n        devices[ i ].mode = modeIdx \n        devices[ i ].wind = windIdx\n        devices[ i ].temp = tempValue\n      end\n    end\n  else\n    local allSame = true\n    for i = 1 , deviceLength - 1 do\n      if devices[ i ].temp ~= tempValue and devices[ i ].on then\n        allSame = false\n        break\n      end\n    end\n    if allSame then\n      devices[ deviceLength ].temp = tempValue\n    end\n  end\n  \n  state = datas.modeNames[ modeIdx ] .. \" \" \n  state = state .. datas.windNames[ windIdx ] .. \" \" \n  if datas.tempShowModes[ modeIdx ] then\n    state = state .. devices[ findIdx ].temp .. \"℃\"\n  else\n    state = state .. \"　 　\"\n  end\n  \n  fibaro:call( selfID , \"setProperty\" , \"ui.State.value\" , state )\n   \n  fibaro:setGlobal( gDatas , json.encode( datas ) )\n  local cmd = fibaro:getGlobal( gCmds ) .. \" SETTING_\" .. findIdx\n  fibaro:setGlobal( gCmds , cmd )\nend","buttonIcon":0,"favourite":false,"main":false}]},{"type":"label","elements":[{"id":16,"lua":false,"waitForResponse":false,"caption":"","name":"Info","favourite":false,"main":false}]}]},"actions":{"pressButton":1,"setSlider":2,"setProperty":2}}