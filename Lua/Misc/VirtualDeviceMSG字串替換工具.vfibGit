{
	"name":"VirtualDeviceMSG字串替換工具",
	"type":"virtual_device",
	"properties":
	{
		"deviceIcon":0,
		"currentIcon":"0",
		"log":"",
		"logTemp":"",
			"mainLoop":"--[[
			\n  @author eFa
			\n  @date   104.09.23
			\n  @brief  按下存檔後，將指定virtual device所有按鈕及拉條中msg值做字串替換
			\n--]]
			\n
			\n-- 要做字串替換的virtual device id
			\nlocal mtDeviceIds = 
			\n{
			\n  1 ,
			\n}
			\nlocal mReplaceWord = \"sendir,1:1\"\t-- 要替換的字
			\n-- 所有要取代掉的字
			\nlocal mtFindWords =
			\n{
			\n  \"sendir,1:1\" ,
			\n  \"sendir,1:2\" ,
			\n  \"sendir,1:3\" ,
			\n}
			\n  
			\n-- HC2 資訊\t\t\t\t
			\nlocal mHc2Password = \"admin\"
			\n
			\n--引用FLH Lib
			\n--[[
			\n  @author eFa
			\n  @brief  FLH開發基本Lib
			\n  @date   2015.09.02
			\n--]]
			\nif FLH == nil then 
			\n  FLH = 
			\n  {
			\n    --[[
			\n      @brief 可以指定顏色的Fibaro:debug()
			\n      @parm  _data  any，欲print的資料
			\n      @parm  _color 字串，欲顯示的顏色。ex: \"yellow\", \"pink\"。不填寫使用預設白色
			\n    --]]
			\n    Log = function( _data , _color )
			\n      _color = _color or \"white\"
			\n      fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _data ) .. '</span>' )
			\n    end ,
			\n
			\n    --[[  
			\n      @brief 解析Table的成員及型態
			\n      @parm  _tTable Table，欲print的Table資料
			\n      @parm  _color  字串，欲顯示的顏色。ex: \"yellow\", \"pink\"。不填寫使用預設白色
			\n      @parm  _space  數字，要留多少空格在顯示文字前面，不填寫使用預設0
			\n    --]]
			\n    LogTable = function( _self , _tTable , _color , _space )
			\n      _space = _space or 0
			\n      local spaceText = \"\"
			\n      for i = 1 , _space do
			\n        spaceText = spaceText .. \"　　\"
			\n      end
			\n      
			\n      for key , value in pairs( _tTable ) do
			\n        if type( value ) == \"table\" then
			\n          _self.Log( spaceText .. key .. \" : table\" , _color )
			\n          LogTable( value , _color , _space + 1 )
			\n        elseif type( value ) == \"function\" then
			\n          _self.Log( spaceText .. key .. \" : function\" , _color )
			\n        elseif type( value ) == \"userdata\" then
			\n          _self.Log( spaceText .. key .. \" : userdata\" , _color )
			\n        else
			\n          _self.Log( spaceText .. key .. \" : \" .. value , _color )
			\n        end
			\n      end
			\n    end ,
			\n    
			\n    --[[  
			\n      @brief 可以指定顏色的Fibaro:debug()，若資料是Table會把所有成員顯示出來
			\n      @parm  _data  any，欲print的資料
			\n      @parm  _color 字串，欲顯示的顏色。ex: \"yellow\", \"pink\"。不填寫使用預設白色
			\n      @parm  _space 數字，要留多少空格在顯示文字前面，不填寫使用預設0
			\n    --]]
			\n    Debug = function( _self , _data , _color , _space )
			\n      _space = _space or 0
			\n      local spaceText = \"\"
			\n      for i = 1 , _space do
			\n        spaceText = spaceText .. \"　　\"
			\n      end
			\n      
			\n      if type( _data ) == 'userdata' then
			\n        _self.Log( spaceText .. \"userdata\" , _color )
			\n      else
			\n        _self.Log( spaceText .. tostring( _data ) , _color )
			\n      end
			\n      
			\n      if type( _data ) == 'table' then
			\n        _self:LogTable( _data , _color , _space + 1 )
			\n      end
			\n    end ,
			\n  }
			\nend
			\n
			\n-- main
			\nif isInit == nil then
			\n  isInit = true
			\n  
			\n  FLH:Debug( \"start\" )
			\n  
			\n  local socket = Net.FHttp( \"localhost\" , 80 )
			\n  socket:setBasicAuthentication( \"admin\" , mHc2Password )
			\n  
			\n  for idx = 1 , #mtDeviceIds do
			\n    local url = \"/api/virtualDevices/\" .. mtDeviceIds[ idx ]
			\n    local response , status , errorCode = socket:GET( url )
			\n    if tonumber( status ) >= 200 and tonumber( status ) < 300 and errorCode == 0 then
			\n      local responseTable = json.decode( response )
			\n      local rows , elements , msg = responseTable.properties.rows
			\n      local repleaseCount , hasChange = 0 , false
			\n      for i = 1 , #rows do
			\n        for j = 1 , #rows[ i ].elements do
			\n          elements = rows[ i ].elements[ j ]
			\n          msg = elements.msg
			\n          local hasReplace = false
			\n          for k = 1 , #mtFindWords do
			\n            if msg ~= nil then
			\n              elements.msg , repleaseCount = elements.msg:gsub( mtFindWords[ k ] , mReplaceWord )    
			\n              if repleaseCount > 0 then
			\n                hasReplace = true
			\n                hasChange = true
			\n              end
			\n            end
			\n          end
			\n          if hasReplace then
			\n            FLH:Debug( tostring( msg ) .. \" > \" .. tostring( elements.msg ) , \"yellow\" )
			\n          end
			\n        end
			\n      end
			\n      if hasChange then
			\n        response , status , errorCode = socket:PUT( url , json.encode( responseTable ) )
			\n        if tonumber( status ) >= 200 and tonumber( status ) < 300 and errorCode == 0 then
			\n          FLH:Debug( \"Check and Replease Success\" , \"cyan\" )
			\n        else
			\n          FLH:Debug( \"PUT Error\" , \"red\" )
			\n        end
			\n      else
			\n        FLH:Debug( \"Check Success\" , \"green\" )
			\n      end
			\n    else
			\n      FLH:Debug( \"Connent Error, please check ip , port , account , and password\" , \"red\" )
			\n    end
			\n  end
			\n  FLH:Debug( \"end\" )
			\nend",
		"visible":"true",
		"rows":
		[
		]
	},
	"actions":
	{
		"pressButton":1,
		"setSlider":2,
		"setProperty":2
	}
}
